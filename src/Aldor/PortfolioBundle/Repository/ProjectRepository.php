<?php

namespace Aldor\PortfolioBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends EntityRepository
{


     function getLastProjects($max,$offset=0)
    {
        $qb = $this->createQueryBuilder('p')->where('p.date< :date')
            ->leftJoin('p.media', 'i')
            ->leftJoin('p.technologies', 't')
            ->setParameter('date',date("Y-m-d H:i:s"))
            ->andWhere('p.public = true')
            -> add('orderBy', 'p.date DESC')
              ->setMaxResults($max)
            ->setFirstResult($offset);
        $query = $qb->getQuery();
        return $query->getResult();

    }
    function getProjectsCount()
    {
        $qb = $this->createQueryBuilder('p');

        $query = $qb->getQuery();
        return count($query->getResult());

    }
     function getLastProjectFromTechnology($catid,$max,$offset)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p', 'i')
            ->where(' p.technology = :cat')
            ->andWhere('p.public = true')
            ->leftJoin('p.media', 'i')
            ->setParameter('cat',$catid)
                ->setMaxResults($max)
            ->setFirstResult($offset);
        $query = $qb->getQuery();
        return $query->getResult();

    }
    function getAllProjects()
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p', 'i', 't')
            ->leftJoin('p.media', 'i')
             ->leftJoin('p.technologies', 't')
            -> add('orderBy', 'p.date DESC')
            ->andWhere('p.public = true');
        $query = $qb->getQuery();
       $query->useResultCache(true, 630, 'getAllProjects');
        return $query->getResult();

    }
    function getAllProjectsFromTechnology($tech)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p', 'i')
            ->leftJoin('p.media', 'i')
             ->innerJoin('p.technologies', 't', 'WITH', 't.id = :tech')
            ->andWhere('p.public = true')
            ->setParameter('tech', $tech->getId())
            -> add('orderBy', 'p.date DESC');
        $query = $qb->getQuery();
       $query->useResultCache(true, 360, 'getAllProjects'.$tech->getId());
        return $query->getResult();

    }
    public function getRecent($max)    {
        $qb = $this->createQueryBuilder('p')
            ->select('p', 'i')
            ->leftJoin('p.media', 'i')
            ->leftJoin('p.technologies', 'c')
            ->andWhere('p.public = true')
            -> add('orderBy', 'p.date DESC')
            -> add('groupBy', 'p.id')
            ->setMaxResults($max);
        $query = $qb->getQuery();
       $query->useResultCache(true, 600, 'getRecentProject'.$max);
        return $query->getResult();

    }

    public function getOne($slug) {
        $qb = $this->createQueryBuilder('p')
            ->select('p', 'i', 'c')
            ->where('p.slug = :slug')
            ->leftJoin('p.media', 'i')
            ->leftJoin('p.technologies', 'c')
            ->setParameter('slug', $slug)
            ->setMaxResults(1);
        $query = $qb->getQuery();
       $query->useResultCache(true, 600, 'getone'.$slug);
        $result = $query->getResult();
        if (count($result)) {
           return $query->getResult()[0];
        }
        return null;

    }
}
